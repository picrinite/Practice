/* Question
Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

For example,
Given nums = [0, 1, 3] return 2.

Note:
Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?	
*/
#include <map>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <unordered_set>
#include <unordered_map>
using namespace std;

class Solution {
public:
	int missingNumber(vector<int>& nums) {
		int res = 0;
		int n = nums.size();
		vector<int> cnt(31);
		for (int num : nums) {
			for (int i = 0; i < 31 && num; ++i) {
				if (num % 2)
					cnt[i]++;
				num >>= 1;
			}
		}
		if ( (n + 1) / 2 != cnt[0])
			res = res | 1;
		int ones = 0;
		for (int i = 1; i < 31; ++i) {
			ones = ones * 2 + 1;
			if (n <= ones)
				break;
			int dividend = 1 << (i + 1);
			if ( ( n % dividend - ones) % 2 != cnt[i] % 2)
				res = res | (1 << i);
		}
		return res;
	}
};

int main() {
	Solution s;
	vector<int>  vec{ 0, 1, 2, 3, 4, 5, 6,  8, 9, 10 };
	cout << s.missingNumber(vec) << endl;
}
