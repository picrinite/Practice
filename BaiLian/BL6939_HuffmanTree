/* Question
描述
Construct an expanded binary tree with n external nodes, each external node Ki related to a weight Wi, which minimizes thesum of the external path length of leaf: Min( W1 * L1 + W2 * L2 + W3 * L3 + … + Wn * Ln)
Wi: the weight of each node
Li: the path length betweenthe root and the ith external node. Compute to minimize the sum of the external path length

输入
The first line is an integer n. n represents the number of external nodes(2<=n<=100). Input n integers in the second line, which represent the weight of each external node.
输出
Output the minimum sum of external path length.
样例输入
4
1 1 3 5
样例输出
17
*/
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <iostream>
#include <queue>
using namespace std;

class HuffmanTreeNode {
public:
	int element;
	HuffmanTreeNode * left, *right;
};
class MyComparator {
public:
	bool operator()(HuffmanTreeNode * hf1, HuffmanTreeNode * hf2) {
		return hf1->element > hf2->element;
	}
};
class HuffmanTree {
private:
	void mergeTree(HuffmanTreeNode *ht1, HuffmanTreeNode *ht2, HuffmanTreeNode * parent) {
		parent->left = ht1;
		parent->right = ht2;
		parent->element = ht1->element + ht2->element;
	}
public:
	HuffmanTreeNode* root;
	HuffmanTree(int weight[], int n) {
		HuffmanTreeNode *nodeList = new HuffmanTreeNode[n];
		priority_queue<HuffmanTreeNode*, vector<HuffmanTreeNode*>, MyComparator> q;
		HuffmanTreeNode *parent;
		for (int i = 0; i < n; ++i) {
			nodeList[i].element = weight[i];
			nodeList[i].left = nodeList[i].right = NULL;
			q.push(&nodeList[i]);
		}
		for (int i = 0; i < n - 1; ++i) {
			parent = new HuffmanTreeNode;
			HuffmanTreeNode * firstChild = q.top();
			q.pop();
			HuffmanTreeNode * secondChild = q.top();
			q.pop();
			mergeTree(firstChild, secondChild, parent);
			q.push(parent);
			root = parent;
		}
	}
};

void print(HuffmanTreeNode * curr, int &sum, int height) {
	if (!curr->left && !curr->right) {
		sum += curr->element * height;
		return;
	}
	print(curr->left, sum, height + 1);
	print(curr->right, sum, height + 1);
}

int main() {
	int n;
	int arr[100];
	scanf("%d", &n);
	for (int i = 0; i < n; ++i) {
		scanf("%d", &arr[i]);
	}
	int sum = 0;
	HuffmanTree hftree(arr, n);
    print(hftree.root, sum, 0);
	cout << sum << endl;
}
