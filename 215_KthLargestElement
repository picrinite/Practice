/* Question
Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.

For example,
Given [3,2,1,5,6,4] and k = 2, return 5.

Note:
You may assume k is always valid, 1 ≤ k ≤ array's length.
*/
#include <map>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <unordered_set>
#include <unordered_map>
using namespace std;
class Solution {
	int getMiddle(vector<int> & nums, int start, int end) {
		int mid = start + (end - start) / 2;
		if (nums[start] >= nums[end]) {
			return nums[mid] >= nums[end] ? mid : end;
		}
		return nums[mid] >= nums[start] ? mid : start;
	}
	int findK(vector<int> & nums, int start, int end, int k) {
		int len = end - start + 1;
		if (len == 1)
			return nums[start];
		if (len == 2)
			return k == 1 ? max(nums[start], nums[end]) : min(nums[start], nums[end]);
		int indexMiddle = getMiddle(nums, start, end);
		int num = nums[indexMiddle];
		swap(nums[indexMiddle], nums[end]);
		int left = start - 1, right = end;
		while (true) {
			while (nums[++left] < num);
			while (nums[--right] > num);
			if (left < right)
				swap(nums[left], nums[right]);
			else
				break;
		}
		swap(nums[left], nums[end]);
		int cnt = end - left + 1;  // cnt not less than num
		if (k == cnt)
			return nums[left];
		else if (k < cnt)
			return findK(nums, left + 1, end, k);
		else
			return findK(nums, start, left - 1, k - cnt);
	}
public:
	int findKthLargest(vector<int>& nums, int k) {
		return findK(nums, 0, nums.size() - 1, k);
	}
};
int main() {
	Solution s;
	vector<int> input{ 1,6,5,6,2, 4,5,1 };
	for (int i = 1; i <= 8; ++i)
		cout << s.findKthLargest(input, i) << endl;

}
