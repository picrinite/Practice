/* Question
Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.


Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].


The largest rectangle is shown in the shaded area, which has area = 10 unit.

For example,
Given height = [2,1,5,6,2,3],
return 10.
*/
#include <map>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <unordered_set>
#include <unordered_map>
using namespace std;
//112815
class Solution {
public:
	int largestRectangleArea(vector<int>& height) {
		int size = height.size();
		if (!size) return 0;
		stack<pair<int, int> > st;  // pair<int, int>   is <index, height>
		int area, maxArea = INT_MIN;
		int topHeight, currHeight;
		height.push_back(0);
		for (int i = 0; i < size + 1; ++i) {
			if (st.empty()) {
				st.push(make_pair(i, height[i]));
				continue;
			}
			currHeight = height[i];
			topHeight = st.top().second;
			if (currHeight == topHeight) 
				continue;
			else if (currHeight > topHeight)
				st.push(make_pair(i, currHeight));
			else {
				int pos;
				while (!st.empty()) {
					topHeight = st.top().second;
					if (currHeight >= topHeight)
						break;
					area = topHeight * (i - st.top().first);
					if (area > maxArea)
						maxArea = area;
					pos = st.top().first;   // pos is the last element removed from stack, which is heigher than current
					st.pop();
				}
				if (st.empty() || currHeight > topHeight)
					st.push(make_pair(pos, currHeight));
			}
		}
		return max(0, maxArea);
	}
};


int main() {
	Solution s;
	vector<int> height{ 2, 4,5,6,7, 8, 9 };
	//vector<int> height{ 2, 1, 2 };
	cout << s.largestRectangleArea(height) << endl;
}
