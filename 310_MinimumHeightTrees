/* Question
For a undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, write a function to find all the MHTs and return a list of their root labels.

Format
The graph contains n nodes which are labeled from 0 to n - 1. You will be given the number n and a list of undirected edges (each edge is a pair of labels).

You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

Example 1:

Given n = 4, edges = [[1, 0], [1, 2], [1, 3]]

0
|
1
/ \
2   3
return [1]

Example 2:

Given n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]

0  1  2
\ | /
3
|
4
|
5
return [3, 4]
*/
#include <map>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <unordered_set>
#include <unordered_map>
using namespace std;
//120115
class Solution {
public:
	vector<int> findMinHeightTrees(int n, vector<pair<int, int>>& edges) {
		vector<int>  row(n);
		vector<vector<int> > table(n, row);
		int n1, n2;
		for (int i = 0; i < edges.size(); ++i) {
			n1 = edges[i].first;
			n2 = edges[i].second;
			table[n1][n2] = table[n2][n1] = 1;
		}
		int minHeight = INT_MAX;
		vector<int> ret;
		for (int i = 0; i < n; ++i) {
			int height = 0;
			vector<int> visited(n);
			queue<int> q;
			q.push(i);
			visited[i] = 1;
			while (!q.empty()) {
				++height;
				int size = q.size();
				while (size--) {
					int parent = q.front();
					q.pop();
					for (int i = 0; i < n; ++i)
						if (table[i][parent] && !visited[i]) {
							q.push(i);
							visited[i] = 1;
						}
				}
			}
			if (height == minHeight)
				ret.push_back(i);
			else if (height < minHeight) {
				ret.clear();
				ret.push_back(i);
				minHeight = height;
			}
		}
		return ret;
	}
};
